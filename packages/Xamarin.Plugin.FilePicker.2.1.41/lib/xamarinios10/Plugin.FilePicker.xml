<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Plugin.FilePicker</name>
    </assembly>
    <members>
        <member name="T:Plugin.FilePicker.CrossFilePicker">
            <summary>
            Cross-platform FilePicker implementation
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.CrossFilePicker.implementation">
            <summary>
            Lazy-initialized file picker implementation
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.CrossFilePicker.Current">
            <summary>
            Current file picker plugin implementation to use
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.CrossFilePicker.CreateFilePicker">
            <summary>
            Creates file picker instance for the platform
            </summary>
            <returns>file picker instance</returns>
        </member>
        <member name="M:Plugin.FilePicker.CrossFilePicker.NotImplementedInReferenceAssembly">
            <summary>
            Returns new exception to throw when implementation is not found. This is the case when
            the NuGet package is not added to the platform specific project.
            </summary>
            <returns>exception to throw</returns>
        </member>
        <member name="T:Plugin.FilePicker.Abstractions.FileData">
            <summary>
            File data that specifies a file that was picked by the user.
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._fileName">
            <summary>
            Backing store for the FileName property
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._filePath">
            <summary>
            Backing store for the FilePath property
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._isDisposed">
            <summary>
            Indicates if the object is already disposed
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._dispose">
            <summary>
            Action to dispose of underlying resources of the picked file.
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._streamGetter">
            <summary>
            Function to get a stream to the picked file.
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.#ctor">
            <summary>
            Creates a new and empty file data object
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.#ctor(System.String,System.String,System.Func{System.IO.Stream},System.Action{System.Boolean})">
            <summary>
            Creates a new file data object with property values
            </summary>
            <param name="filePath">
            Full file path to the picked file.
            </param>
            <param name="fileName">
            File name of the picked file.
            </param>
            <param name="streamGetter">
            Function to get a stream to the picked file.
            </param>
            <param name="dispose">
            Action to dispose of the underlying resources of the picked file.
            </param>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.ReadFully(System.IO.Stream)">
            <summary>
            Completely reads all bytes from the input stream and returns it as byte array. Can be
            used when the returned file data consists of a stream, not a real filename.
            </summary>
            <param name="input">input stream</param>
            <returns>byte array</returns>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FileData.DataArray">
            <summary>
            Returns the raw data bytes for the picked file.
            Note that due to how this property is implemented, you may only
            call this once.  You can always access the underlying stream by
            directly calling GetStream().
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FileData.FileName">
            <summary>
            Filename of the picked file, without path
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FileData.FilePath">
            <summary>
            Full filepath of the picked file.
            Note that on specific platforms this can also contain an URI that
            can't be opened with file related APIs. Use DataArray property or
            GetStream() method in this cases.
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.GetStream">
            <summary>
            Gets stream to access the picked file.
            Note that when DataArray property was already accessed, the stream
            must be rewinded to the beginning.
            </summary>
            <returns>stream object</returns>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.Dispose">
            <summary>
            Disposes of all resources in the object
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.Dispose(System.Boolean)">
            <summary>
            Disposes of managed resources
            </summary>
            <param name="disposing">
            True when called from Dispose(), false when called from the destructor
            </param>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.Finalize">
            <summary>
            Finalizer for this object
            </summary>
        </member>
        <member name="T:Plugin.FilePicker.Abstractions.FilePickerCancelledEventArgs">
            <summary>
            Event arguments for the event when file picking was cancelled, either
            by the user or when an exception occured
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FilePickerCancelledEventArgs.Exception">
            <summary>
            Exception that occured that led to cancelling file picking; may be
            null when file picking was cancelled by the user
            </summary>
        </member>
        <member name="T:Plugin.FilePicker.Abstractions.FilePickerEventArgs">
            <summary>
            Event arguments for the event when file picking was completed.
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FilePickerEventArgs.FileName">
            <summary>
            File name part of picked file, without path
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FilePickerEventArgs.FilePath">
            <summary>
            Complete file path of picked file; on some OS this may contain an Uri
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FilePickerEventArgs.#ctor">
            <summary>
            Creates a new and empty file picker event args object
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FilePickerEventArgs.#ctor(System.String)">
            <summary>
            Creates new file picker event args
            </summary>
            <param name="fileName">file name part of picked file</param>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FilePickerEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates new file picker event args
            </summary>
            <param name="fileName">file name part of picked file</param>
            <param name="filePath">complete file path of picked file</param>
        </member>
        <member name="T:Plugin.FilePicker.Abstractions.IFilePicker">
            <summary>
            Interface for FilePicker plugin. Access the platform specific instance
            of this interface by using CrossFilePicker.Current.
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.IFilePicker.PickFile(System.String[])">
            <summary>
            Starts file picking and returns file data for picked file. File
            types can be specified in order to limit files that can be
            selected. Note that this method may throw exceptions that occured
            during file picking.
            </summary>
            <param name="allowedTypes">
            Specifies one or multiple allowed types. When null, all file types
            can be selected while picking.
            On Android you can specify one or more MIME types, e.g.
            "image/png"; also wild card characters can be used, e.g. "image/*".
            On iOS you can specify UTType constants, e.g. UTType.Image.
            On UWP, specify a list of extensions, like this: ".jpg", ".png".
            On WPF, specify strings like this: "Data type (*.ext)|*.ext", which
            corresponds how the Windows file open dialog specifies file types.
            </param>
            <returns>
            File data object, or null when user cancelled picking file
            </returns>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.IFilePicker.SaveFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            Saves the file that was picked to external storage.
            </summary>
            <param name="fileToSave">
            File data from a call to PickFile() that should be saved.
            </param>
            <returns>
            True when file was saved successfully, false when there was an
            error
            </returns>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.IFilePicker.OpenFile(System.String)">
            <summary>
            Opens the file with given filename in an external application that
            is registered for this file type.
            </summary>
            <param name="fileToOpen">
            Full filename of the file to open
            </param>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.IFilePicker.OpenFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            Opens the file specified by first storing the file to external
            storage, then opening it in an external application that is
            registered for this file type. This is a combination of SaveFile()
            and OpenFile() above.
            </summary>
            <param name="fileToOpen">
            File data from a call to PickFile() that should be opened.
            </param>
        </member>
        <member name="T:Plugin.FilePicker.FilePickerImplementation">
            <summary>
            Implementation for file picking on iOS
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerImplementation.requestId">
            <summary>
            Request ID for current picking call
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerImplementation.completionSource">
            <summary>
            Task completion source for task when finished picking
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.FilePickerImplementation.Handler">
            <summary>
            Event which is invoked when a file was picked
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OnFilePicked(Plugin.FilePicker.Abstractions.FilePickerEventArgs)">
            <summary>
            Called when file has been picked successfully
            </summary>
            <param name="args">file picker event args</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.DocumentPicker_DidPickDocumentAtUrls(System.Object,UIKit.UIDocumentPickedAtUrlsEventArgs)">
            <summary>
            Callback method called by document picker when file has been picked; this is called
            starting from iOS 11.
            </summary>
            <param name="sender">sender object (document picker)</param>
            <param name="args">event args</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.DocumentPicker_DidPickDocument(System.Object,UIKit.UIDocumentPickedEventArgs)">
            <summary>
            Callback method called by document picker when file has been picked; this is called
            up to iOS 10.
            </summary>
            <param name="sender">sender object (document picker)</param>
            <param name="args">event args</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.DocumentPicker_WasCancelled(System.Object,System.EventArgs)">
            <summary>
            Handles when the file picker was cancelled. Either in the
            popup menu or later on.
            </summary>
            <param name="sender">sender object (document picker)</param>
            <param name="args">event args</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.PickFile(System.String[])">
            <summary>
            Lets the user pick a file with the systems default file picker.
            For iOS iCloud drive needs to be configured.
            </summary>
            <param name="allowedTypes">
            Specifies one or multiple allowed types. When null, all file types
            can be selected while picking.
            On iOS you can specify UTType constants, e.g. UTType.Image.
            </param>
            <returns>
            File data object, or null when user cancelled picking file
            </returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.PickMediaAsync(System.String[])">
            <summary>
            File picking implementation
            </summary>
            <param name="allowedTypes">list of allowed types; may be null</param>
            <returns>picked file data, or null when picking was cancelled</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.GetActiveViewController">
            <summary>
            Finds active view controller to use to present document picker
            </summary>
            <returns>view controller to use</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.GetRequestId">
            <summary>
            Returns a new request ID for a new call to PickFile()
            </summary>
            <returns>new request ID</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.SaveFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            iOS implementation of saving a picked file to the iOS "my documents" directory.
            </summary>
            <param name="fileToSave">picked file data for file to save</param>
            <returns>true when file was saved successfully, false when not</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OpenFile(Foundation.NSUrl)">
            <summary>
            iOS implementation of opening a file by using a UIDocumentInteractionController.
            </summary>
            <param name="fileUrl">file Url to open in viewer</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OpenFile(System.String)">
            <summary>
            iOS implementation of OpenFile(), opening a file already stored on iOS "my documents"
            directory.
            </summary>
            <param name="fileToOpen">relative filename of file to open</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OpenFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            iOS implementation of OpenFile(), opening a picked file in an external viewer. The
            picked file is saved to iOS "my documents" directory before opening.
            </summary>
            <param name="fileToOpen">picked file data</param>
        </member>
    </members>
</doc>
