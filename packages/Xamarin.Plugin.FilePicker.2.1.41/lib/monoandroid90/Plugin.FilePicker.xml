<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Plugin.FilePicker</name>
    </assembly>
    <members>
        <member name="T:Plugin.FilePicker.CrossFilePicker">
            <summary>
            Cross-platform FilePicker implementation
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.CrossFilePicker.implementation">
            <summary>
            Lazy-initialized file picker implementation
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.CrossFilePicker.Current">
            <summary>
            Current file picker plugin implementation to use
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.CrossFilePicker.CreateFilePicker">
            <summary>
            Creates file picker instance for the platform
            </summary>
            <returns>file picker instance</returns>
        </member>
        <member name="M:Plugin.FilePicker.CrossFilePicker.NotImplementedInReferenceAssembly">
            <summary>
            Returns new exception to throw when implementation is not found. This is the case when
            the NuGet package is not added to the platform specific project.
            </summary>
            <returns>exception to throw</returns>
        </member>
        <member name="T:Plugin.FilePicker.Abstractions.FileData">
            <summary>
            File data that specifies a file that was picked by the user.
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._fileName">
            <summary>
            Backing store for the FileName property
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._filePath">
            <summary>
            Backing store for the FilePath property
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._isDisposed">
            <summary>
            Indicates if the object is already disposed
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._dispose">
            <summary>
            Action to dispose of underlying resources of the picked file.
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.Abstractions.FileData._streamGetter">
            <summary>
            Function to get a stream to the picked file.
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.#ctor">
            <summary>
            Creates a new and empty file data object
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.#ctor(System.String,System.String,System.Func{System.IO.Stream},System.Action{System.Boolean})">
            <summary>
            Creates a new file data object with property values
            </summary>
            <param name="filePath">
            Full file path to the picked file.
            </param>
            <param name="fileName">
            File name of the picked file.
            </param>
            <param name="streamGetter">
            Function to get a stream to the picked file.
            </param>
            <param name="dispose">
            Action to dispose of the underlying resources of the picked file.
            </param>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.ReadFully(System.IO.Stream)">
            <summary>
            Completely reads all bytes from the input stream and returns it as byte array. Can be
            used when the returned file data consists of a stream, not a real filename.
            </summary>
            <param name="input">input stream</param>
            <returns>byte array</returns>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FileData.DataArray">
            <summary>
            Returns the raw data bytes for the picked file.
            Note that due to how this property is implemented, you may only
            call this once.  You can always access the underlying stream by
            directly calling GetStream().
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FileData.FileName">
            <summary>
            Filename of the picked file, without path
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FileData.FilePath">
            <summary>
            Full filepath of the picked file.
            Note that on specific platforms this can also contain an URI that
            can't be opened with file related APIs. Use DataArray property or
            GetStream() method in this cases.
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.GetStream">
            <summary>
            Gets stream to access the picked file.
            Note that when DataArray property was already accessed, the stream
            must be rewinded to the beginning.
            </summary>
            <returns>stream object</returns>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.Dispose">
            <summary>
            Disposes of all resources in the object
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.Dispose(System.Boolean)">
            <summary>
            Disposes of managed resources
            </summary>
            <param name="disposing">
            True when called from Dispose(), false when called from the destructor
            </param>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FileData.Finalize">
            <summary>
            Finalizer for this object
            </summary>
        </member>
        <member name="T:Plugin.FilePicker.Abstractions.FilePickerCancelledEventArgs">
            <summary>
            Event arguments for the event when file picking was cancelled, either
            by the user or when an exception occured
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FilePickerCancelledEventArgs.Exception">
            <summary>
            Exception that occured that led to cancelling file picking; may be
            null when file picking was cancelled by the user
            </summary>
        </member>
        <member name="T:Plugin.FilePicker.Abstractions.FilePickerEventArgs">
            <summary>
            Event arguments for the event when file picking was completed.
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FilePickerEventArgs.FileName">
            <summary>
            File name part of picked file, without path
            </summary>
        </member>
        <member name="P:Plugin.FilePicker.Abstractions.FilePickerEventArgs.FilePath">
            <summary>
            Complete file path of picked file; on some OS this may contain an Uri
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FilePickerEventArgs.#ctor">
            <summary>
            Creates a new and empty file picker event args object
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FilePickerEventArgs.#ctor(System.String)">
            <summary>
            Creates new file picker event args
            </summary>
            <param name="fileName">file name part of picked file</param>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.FilePickerEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates new file picker event args
            </summary>
            <param name="fileName">file name part of picked file</param>
            <param name="filePath">complete file path of picked file</param>
        </member>
        <member name="T:Plugin.FilePicker.Abstractions.IFilePicker">
            <summary>
            Interface for FilePicker plugin. Access the platform specific instance
            of this interface by using CrossFilePicker.Current.
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.IFilePicker.PickFile(System.String[])">
            <summary>
            Starts file picking and returns file data for picked file. File
            types can be specified in order to limit files that can be
            selected. Note that this method may throw exceptions that occured
            during file picking.
            </summary>
            <param name="allowedTypes">
            Specifies one or multiple allowed types. When null, all file types
            can be selected while picking.
            On Android you can specify one or more MIME types, e.g.
            "image/png"; also wild card characters can be used, e.g. "image/*".
            On iOS you can specify UTType constants, e.g. UTType.Image.
            On UWP, specify a list of extensions, like this: ".jpg", ".png".
            On WPF, specify strings like this: "Data type (*.ext)|*.ext", which
            corresponds how the Windows file open dialog specifies file types.
            </param>
            <returns>
            File data object, or null when user cancelled picking file
            </returns>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.IFilePicker.SaveFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            Saves the file that was picked to external storage.
            </summary>
            <param name="fileToSave">
            File data from a call to PickFile() that should be saved.
            </param>
            <returns>
            True when file was saved successfully, false when there was an
            error
            </returns>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.IFilePicker.OpenFile(System.String)">
            <summary>
            Opens the file with given filename in an external application that
            is registered for this file type.
            </summary>
            <param name="fileToOpen">
            Full filename of the file to open
            </param>
        </member>
        <member name="M:Plugin.FilePicker.Abstractions.IFilePicker.OpenFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            Opens the file specified by first storing the file to external
            storage, then opening it in an external application that is
            registered for this file type. This is a combination of SaveFile()
            and OpenFile() above.
            </summary>
            <param name="fileToOpen">
            File data from a call to PickFile() that should be opened.
            </param>
        </member>
        <member name="T:Plugin.FilePicker.FilePickerActivity">
            <summary>
            Activity that is shown in order to start Android file picking using ActionGetContent
            intent.
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerActivity.ExtraAllowedTypes">
            <summary>
            Intent Extra constant to pass list of allowed types to FilePicker activity.
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerActivity.RequestStorage">
            <summary>
            This variable gets passed when the request for the permission to access storage
            gets send and then gets again read whne the request gets answered.
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerActivity.context">
            <summary>
            Android context to be used for opening file picker
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerActivity.OnCreate(Android.OS.Bundle)">
            <summary>
            Called when activity is about to be created; immediately starts file picker intent
            when permission is available, otherwise requests permission on API level >= 23 or
            throws an error if the API level is below.
            </summary>
            <param name="savedInstanceState">saved instance state; unused</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerActivity.OnRequestPermissionsResult(System.Int32,System.String[],Android.Content.PM.Permission[])">
            <summary>
            Receives the answer from the dialog that asks for the READ_EXTERNAL_STORAGE permission
            and starts the FilePicker if it's granted or otherwise closes this activity.
            </summary>
            <param name="requestCode">requestCode; shows us that the dialog we requested is responsible for this answer</param>
            <param name="permissions">permissions; unused</param>
            <param name="grantResults">grantResults; contains the result of the dialog to request the permission</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerActivity.StartPicker">
            <summary>
            Sends an intent to start the FilePicker
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerActivity.OnActivityResult(System.Int32,Android.App.Result,Android.Content.Intent)">
            <summary>
            Called when activity started with StartActivityForResult() returns.
            </summary>
            <param name="requestCode">request code used in StartActivityForResult()</param>
            <param name="resultCode">result code</param>
            <param name="data">intent data from file picking</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerActivity.GetFileName(Android.Content.Context,Android.Net.Uri)">
            <summary>
            Retrieves file name part from given Uri
            </summary>
            <param name="context">Android context to access content resolver</param>
            <param name="uri">Uri to get filename for</param>
            <returns>file name part</returns>
        </member>
        <member name="E:Plugin.FilePicker.FilePickerActivity.FilePicked">
            <summary>
            Event that gets signaled when file has successfully been picked
            </summary>
        </member>
        <member name="E:Plugin.FilePicker.FilePickerActivity.FilePickCancelled">
            <summary>
            Event that gets signaled when file picking has been cancelled by the user
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerActivity.OnFilePickCancelled">
            <summary>
            Signals event that file picking was cancelled
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerActivity.OnFilePicked(Plugin.FilePicker.Abstractions.FilePickerEventArgs)">
            <summary>
            Signals event that file picking has finished
            </summary>
            <param name="args">file picker event args</param>
        </member>
        <member name="T:Plugin.FilePicker.FilePickerImplementation">
            <summary>
            Implementation for file picking on Android
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerImplementation.context">
            <summary>
            Android context to use for picking
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerImplementation.requestId">
            <summary>
            Request ID for current picking call
            </summary>
        </member>
        <member name="F:Plugin.FilePicker.FilePickerImplementation.completionSource">
            <summary>
            Task completion source for task when finished picking
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.#ctor">
            <summary>
            Creates a new file picker implementation
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.PickFile(System.String[])">
            <summary>
            Implementation for picking a file on Android.
            </summary>
            <param name="allowedTypes">
            Specifies one or multiple allowed types. When null, all file types
            can be selected while picking.
            On Android you can specify one or more MIME types, e.g.
            "image/png"; also wild card characters can be used, e.g. "image/*".
            </param>
            <returns>
            File data object, or null when user cancelled picking file
            </returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.PickFileAsync(System.String[],System.String)">
            <summary>
            File picking implementation
            </summary>
            <param name="allowedTypes">list of allowed types; may be null</param>
            <param name="action">Android intent action to use; unused</param>
            <returns>picked file data, or null when picking was cancelled</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.GetRequestId">
            <summary>
            Returns a new request ID for a new call to PickFile()
            </summary>
            <returns>new request ID</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.SaveFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            Android implementation of saving a picked file to the external storage directory.
            </summary>
            <param name="fileToSave">picked file data for file to save</param>
            <returns>true when file was saved successfully, false when not</returns>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OpenFile(Java.IO.File)">
            <summary>
            Android implementation of opening a file by using ActionView intent.
            </summary>
            <param name="fileToOpen">file to open in viewer</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OpenFile(System.String)">
            <summary>
            Android implementation of OpenFile(), opening a file already stored on external
            storage.
            </summary>
            <param name="fileToOpen">relative filename of file to open</param>
        </member>
        <member name="M:Plugin.FilePicker.FilePickerImplementation.OpenFile(Plugin.FilePicker.Abstractions.FileData)">
            <summary>
            Android implementation of OpenFile(), opening a picked file in an external viewer. The
            picked file is saved to external storage before opening.
            </summary>
            <param name="fileToOpen">picked file data</param>
        </member>
        <member name="T:Plugin.FilePicker.IOUtil">
            <summary>
            Android I/O utility functions
            </summary>
        </member>
        <member name="M:Plugin.FilePicker.IOUtil.GetPath(Android.Content.Context,Android.Net.Uri)">
            <summary>
            Tries to find a file system path for given Uri. Note that this isn't always possible,
            since the content referenced by the Uri may not be stored on a file system, but is
            returned by the responsible app by using a ContentProvider. In this case, the method
            returns null, and access to the content is only possible by opening a stream.
            </summary>
            <param name="context">Android context to access content resolver</param>
            <param name="uri">Uri to use</param>
            <returns>full file system path, or null</returns>
        </member>
        <member name="M:Plugin.FilePicker.IOUtil.IsMediaStore(System.String)">
            <summary>
            Checks if the scheme part of the URL matches the content:// scheme
            </summary>
            <param name="scheme">scheme part of URL</param>
            <returns>true when it matches, false when not</returns>
        </member>
        <member name="M:Plugin.FilePicker.IOUtil.GetDataColumn(Android.Content.Context,Android.Net.Uri,System.String,System.String[])">
            <summary>
            Returns the "data" column of an Uri from the content resolver.
            </summary>
            <param name="context">Android context to access content resolver</param>
            <param name="uri">content Uri</param>
            <param name="selection">selection 'where' clause, or null</param>
            <param name="selectionArgs">selection arguments, or null</param>
            <returns>data column text, or null when query contained no data column</returns>
        </member>
        <member name="M:Plugin.FilePicker.IOUtil.IsExternalStorageDocument(Android.Net.Uri)">
            <summary>
            Returns if the given Uri is an ExternalStorageProvider Uri
            </summary>
            <param name="uri">the Uri to check</param>
            <returns>whether the Uri authority is an ExternalStorageProvider</returns>
        </member>
        <member name="M:Plugin.FilePicker.IOUtil.IsDownloadsDocument(Android.Net.Uri)">
            <summary>
            Returns if the given Uri is a DownloadsProvider Uri
            </summary>
            <param name="uri">the Uri to check</param>
            <returns>whether the Uri authority is a DownloadsProvider</returns>
        </member>
        <member name="M:Plugin.FilePicker.IOUtil.IsMediaDocument(Android.Net.Uri)">
            <summary>
            Returns if the given Uri is a MediaProvider Uri
            </summary>
            <param name="uri">the Uri to check</param>
            <returns>whether the Uri authority is a MediaProvider</returns>
        </member>
        <member name="M:Plugin.FilePicker.IOUtil.GetMimeType(System.String)">
            <summary>
            Returns MIME type for given Url
            </summary>
            <param name="url">Url to check</param>
            <returns>MIME type, or null when none can be determined</returns>
        </member>
        <member name="M:Plugin.FilePicker.IOUtil.GetExtensionFromUri(Android.Content.Context,Android.Net.Uri)">
            <summary>
            Returns a file extension for given content Uri
            </summary>
            <param name="context">context to use</param>
            <param name="uri">content Uri to check</param>
            <returns>file extension, without leading dot, or empty string</returns>
        </member>
    </members>
</doc>
