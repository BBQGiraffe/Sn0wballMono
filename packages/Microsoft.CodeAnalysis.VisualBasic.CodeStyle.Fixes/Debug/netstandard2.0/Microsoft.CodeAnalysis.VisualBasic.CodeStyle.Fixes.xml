<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.CodeAnalysis.VisualBasic.CodeStyle.Fixes
</name>
</assembly>
<members>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.IsStatementTerminatingTokenVisitor">
 <summary>
 A visitor that determines if the targetToken passed in the constructor can be considered
 the end of the visited statement. Tokens in the token stream of the file after
 targetToken are ignored. This means that in some cases, say "Throw" vs. "Throw x" there
 is more than one keyword that could terminate the statement.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.SyntaxTokenExtensions.HasNonContinuableEndOfLineBeforePosition(Microsoft.CodeAnalysis.SyntaxToken,System.Int32,System.Boolean)">
 <summary>
 We need to check for EOL trivia not preceded by LineContinuation trivia.
 
 This is slightly complicated since we need to get TrailingTrivia from missing tokens
 and then get LeadingTrivia for the next non-missing token.
 
 Note that this is even more complicated in the case that we're in structured trivia
 because we might be part of the leading trivia to the next non-missing token.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.SyntaxTreeExtensions.IsTypeDeclarationContext(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken)">
 <summary>
 The specified position is where we can declare some .NET type, such as classes, structures, etc.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.SyntaxTreeExtensions.IsTypeMemberDeclarationKeywordContext(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken)">
 <summary>
 The specified position is where a keyword can go like "Sub", "Function", etc. in a classes, structures, and modules
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.SyntaxTreeExtensions.IsInterfaceMemberDeclarationKeywordContext(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken)">
 <summary>
 The specified position is where a keyword can go like "Sub", "Function" in an interface
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.SyntaxTreeExtensions.IsTypeDeclarationKeywordContext(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken)">
 <summary>
 The specified position is where we can declare some .NET type, such as classes, structures, etc.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.SyntaxTreeExtensions.IsSingleLineStatementContext(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken)">
 <summary>
 The specified position is where I could start a statement in a place where exactly one
 statement could exist.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.SyntaxTreeExtensions.IsMultiLineStatementStartContext(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken)">
 <summary>
 The specified position is where I could start a statement in a place where one or more
 statements could exist.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.SyntaxTreeExtensions.IsAfterStatementOfKind(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,Microsoft.CodeAnalysis.SyntaxToken,System.Threading.CancellationToken,Microsoft.CodeAnalysis.VisualBasic.SyntaxKind[])">
 <summary>
 The specified position is immediately following a statement of one of the given kinds.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.SyntaxTreeExtensions.GetExpressionTerminatingToken(Microsoft.CodeAnalysis.SyntaxNode)">
 <summary>
 Given a syntax node, this returns the token that is the "end" token that ends this
 expression.
 </summary>
 <param name="expression">The expression to get the last token of.</param>
 <returns>The last token, or SyntaxKind.None if the last token is missing.</returns>
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.VisualBasicSyntaxContext">
 <summary>
 Helper structure to store some context about a position for keyword completion
 </summary>
</member>
<member name="F:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.VisualBasicSyntaxContext.FollowsEndOfStatement">
 <summary>
 True if position is after a colon, or an
 EOL that was not preceded by an explicit line continuation
 </summary>
</member>
<member name="F:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.VisualBasicSyntaxContext.MustBeginNewStatement">
 <summary>
 True if position is definitely the beginning of a new statement (after a colon
 or two line breaks).
 
 Dim q = From a In args
 $1
 $2
 
 $1 may continue the previous statement, but $2 definitely starts a 
 new statement since there are two line breaks before it.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.VisualBasicSyntaxTreeExtensions.IsAfterStatementOfKind(Microsoft.CodeAnalysis.VisualBasic.Extensions.ContextQuery.VisualBasicSyntaxContext,Microsoft.CodeAnalysis.VisualBasic.SyntaxKind[])">
 <summary>
 The specified position is immediately following a statement of one of the given kinds.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.IMethodSymbolExtensions.IsAggregateFunction(Microsoft.CodeAnalysis.IMethodSymbol)">
 <summary>
 Determines whether the given IMethodSymbol can be used as an aggregate function
 in a Group..By..Into or an Aggregate..Into clause.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxKindExtensions.Contains(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind[],Microsoft.CodeAnalysis.VisualBasic.SyntaxKind)">
 <summary>
 Determine if the given <see cref="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind"/> array contains the given kind.
 </summary>
 <param name="kinds">Array to search</param>
 <param name="kind">Sought value</param>
 <returns>True if <paramref name="kinds"/> contains the value <paramref name="kind"/>.</returns>
 <remarks>PERF: Not using Array.IndexOf here because it results in a call to IndexOf on the default EqualityComparer for SyntaxKind. The default comparer for SyntaxKind is
 the ObjectEqualityComparer which results in boxing allocations.</remarks>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxKindExtensions.IndexOf(Microsoft.CodeAnalysis.VisualBasic.SyntaxKind[],Microsoft.CodeAnalysis.VisualBasic.SyntaxKind,System.Int32)">
 <summary>
 Locate the given <see cref="T:Microsoft.CodeAnalysis.VisualBasic.SyntaxKind"/> in an array starting at the given index.
 </summary>
 <param name="kinds">Array to search</param>
 <param name="kind">Sought value</param>
 <param name="start">Starting index</param>
 <returns>The index of the first occurrence of <paramref name="kind"/> in <paramref name="kinds"/>.</returns>
 <remarks>PERF: Not using Array.IndexOf here because it results in a call to IndexOf on the default EqualityComparer for SyntaxKind. The default comparer for SyntaxKind is
 the ObjectEqualityComparer which results in boxing allocations.</remarks>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSymbolDeclarationService.GetDeclarations(Microsoft.CodeAnalysis.ISymbol)">
 <summary>
 Get the declaring syntax node for a Symbol. Unlike the DeclaringSyntaxReferences property,
 this function always returns a block syntax, if there is one.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.VisualBasicSymbolDeclarationService.GetBlockFromBegin(Microsoft.CodeAnalysis.SyntaxNode)">
 <summary>
 If "node" is the begin statement of a declaration block, return that block, otherwise
 return node.
 </summary>
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.Utilities.ModifierCollectionFacts">
 <summary>
 A helper class that is constructed giving a set of modifiers. It takes these modifiers, and
 breaks them down into separate categories, as well as determines what type of declaration is
 being forced if certain modifiers are present.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.RemoveUnusedMembers.VisualBasicRemoveUnusedMembersCodeFixProvider.AdjustAndAddAppropriateDeclaratorsToRemove(System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.VisualBasic.Syntax.FieldDeclarationSyntax},System.Collections.Generic.HashSet{Microsoft.CodeAnalysis.SyntaxNode})">
 <summary>
 This method adjusts the <paramref name="declarators"/> to remove based on whether or not all variable declarators
 within a field declaration should be removed,
 i.e. if all the fields declared within a field declaration are unused,
 we can remove the entire field declaration instead of individual variable declarators.
 </summary>
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.UseConditionalExpression.MultiLineConditionalExpressionFormattingRule">
 <summary>
 Special formatting rule that will convert a conditional expression into the following form
 if it has the <see cref="F:Microsoft.CodeAnalysis.UseConditionalExpression.UseConditionalExpressionCodeFixHelpers.SpecializedFormattingAnnotation"/>
 on it:

 <code>
     Dim v = If(expr,
         whenTrue,
         whenFalse)
 </code>

 i.e. both branches will be on a newline, indented once from the parent indentation.
 </summary>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.VBCodeStyleFixesResources.EmptyResource">
 <summary>Remove this value when another is added.</summary>
</member>
<member name="P:VisualBasicWorkspaceExtensionsResources.EmptyResource">
 <summary>Remove this value when another is added.</summary>
</member>
<member name="P:VisualBasicCodeFixesResources.Remove_Unnecessary_Imports">
 <summary>Remove Unnecessary Imports</summary>
</member>
<member name="P:VisualBasicCodeFixesResources.Add_Me">
 <summary>Add 'Me.'</summary>
</member>
<member name="P:VisualBasicCodeFixesResources.Convert_GetType_to_NameOf">
 <summary>Convert 'GetType' to 'NameOf'</summary>
</member>
</members>
</doc>
