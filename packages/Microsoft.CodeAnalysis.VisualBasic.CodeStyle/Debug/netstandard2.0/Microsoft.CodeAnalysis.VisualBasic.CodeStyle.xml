<?xml version="1.0"?>
<doc>
<assembly>
<name>
Microsoft.CodeAnalysis.VisualBasic.CodeStyle
</name>
</assembly>
<members>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.Formatting.FormattingResult">
 <summary>
 this holds onto changes made by formatting engine.
 
 currently it only has an ability to apply those changes to buffer. but it could be expanded to
 support other cases as well such as tree or etc.
 </summary>
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.Formatting.TriviaDataFactory">
 <summary>
 trivia factory.
 
 it will cache some commonly used trivia to reduce memory footprint and heap allocation
 </summary>
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.Formatting.TriviaDataFactory.ComplexTrivia">
 <summary>   
 represents a general trivia between two tokens. slightly more expensive than others since it
 needs to calculate stuff unlike other cases
 </summary>
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.Formatting.TriviaDataFactory.LineContinuationTrivia">
 <summary>   
 represents a general trivia between two tokens. slightly more expensive than others since it
 needs to calculate stuff unlike other cases
 </summary>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.Extensions.DirectiveSyntaxExtensions.DirectiveInfo.StartEndMap">
 <summary>
 Returns a map which maps from a DirectiveTriviaSyntax to it's corresponding start/end directive.
 Directives like #ElseIf which exist in the middle of a start/end pair are not included.
 </summary>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.Extensions.DirectiveSyntaxExtensions.DirectiveInfo.ConditionalMap">
 <summary>
 Maps a #If/#ElseIf/#Else/#EndIf directive to its list of matching #If/#ElseIf/#Else/#End directives.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.DirectiveSyntaxExtensions.GetMatchingStartOrEndDirective(Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Threading.CancellationToken)">
 <summary>
 Given a starting or ending directive, return the matching directive, if it exists. For directives that live
 the "middle" of a start/end pair, such as #ElseIf or #Else, this method will throw.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.DirectiveSyntaxExtensions.GetMatchingConditionalDirectives(Microsoft.CodeAnalysis.VisualBasic.Syntax.DirectiveTriviaSyntax,System.Threading.CancellationToken)">
 <summary>
 Given a conditional directive (#If, #ElseIf, #Else, or #End If), returns a IEnumerable of all directives in
 the set.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.ExpressionSyntaxExtensions.DecomposeName(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax@,System.String@,System.Int32@)">
 <summary>
 Decompose a name or member access expression into its component parts.
 </summary>
 <param name="expression">The name or member access expression.</param>
 <param name="qualifier">The qualifier (or left-hand-side) of the name expression. This may be null if there is no qualifier.</param>
 <param name="name">The name of the expression.</param>
 <param name="arity">The number of generic type parameters.</param>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxNodeExtensions.SplitNodesOnPreprocessorBoundaries``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
 <summary>
 Breaks up the list of provided nodes, based on how they are 
 interspersed with pp directives, into groups.  Within these groups
 nodes can be moved around safely, without breaking any pp 
 constructs.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxNodeExtensions.ContainsInterleavedDirective(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)">
 <summary>
 Returns true if the passed in node contains an interleaved pp 
 directive.
 
 i.e. The following returns false:
 
   void Goo() {
 #if true
 #endif
   }
 
 #if true
   void Goo() {
   }
 #endif
 
 but these return true:
 
 #if true
   void Goo() {
 #endif
   }
 
   void Goo() {
 #if true
   }
 #endif
 
 #if true
   void Goo() {
 #else
   }
 #endif
 
 i.e. the method returns true if it contains a PP directive that 
 belongs to a grouping constructs (like #if/#endif or 
 #region/#endregion), but the grouping construct isn't entirely c
 contained within the span of the node.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxNodeExtensions.IsExecutableBlock(Microsoft.CodeAnalysis.SyntaxNode)">
 <summary>
 Returns true if this is a block that can contain multiple executable statements.  i.e.
 this node is the VB equivalent of a BlockSyntax in C#.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxNodeExtensions.ChildThatContainsPosition(Microsoft.CodeAnalysis.SyntaxNode,System.Int32,System.Int32@)">
 <summary>
 Returns child node or token that contains given position.
 </summary>
 <remarks>
 This is a copy of <see cref="M:Microsoft.CodeAnalysis.SyntaxNode.ChildThatContainsPosition(System.Int32)"/>  that also returns the index of the child node.
 </remarks>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxNodeExtensions.GetRootConditionalAccessExpression(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)">
 <summary>
 <see cref="M:Microsoft.CodeAnalysis.LanguageServices.ISyntaxFacts.GetRootConditionalAccessExpression(Microsoft.CodeAnalysis.SyntaxNode)"/>
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxTokenExtensions.IsChildToken``1(Microsoft.CodeAnalysis.SyntaxToken,System.Func{``0,Microsoft.CodeAnalysis.SyntaxToken})">
 <summary>
 Returns true if is a given token is a child token of a certain type of parent node.
 </summary>
 <typeparam name="TParent">The type of the parent node.</typeparam>
 <param name="token">The token that we are testing.</param>
 <param name="childGetter">A function that, when given the parent node, returns the child token we are interested in.</param>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxTokenExtensions.IsChildSeparatorToken``2(Microsoft.CodeAnalysis.SyntaxToken,System.Func{``0,Microsoft.CodeAnalysis.SeparatedSyntaxList{``1}})">
 <summary>
 Returns true if is a given token is a separator token in a given parent list.
 </summary>
 <typeparam name="TParent">The type of the parent node containing the separated list.</typeparam>
 <param name="token">The token that we are testing.</param>
 <param name="childGetter">A function that, when given the parent node, returns the separated list.</param>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxTokenExtensions.IsFirstTokenOnLine(Microsoft.CodeAnalysis.SyntaxToken)">
 <summary>
 Determines whether the given SyntaxToken is the first token on a line
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxTreeExtensions.IsLastTokenOfStatementWithEndOfLine(Microsoft.CodeAnalysis.SyntaxToken)">
 <summary>
 check whether given token is the last token of a statement that ends with end of line trivia or an elastic trivia
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxTreeExtensions.IsLastTokenOfStatement(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,Microsoft.CodeAnalysis.VisualBasic.Syntax.StatementSyntax@)">
 <summary>
 check whether given token is the last token of a statement by walking up the spine
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Extensions.SyntaxTreeExtensions.FindTriviaToLeft(Microsoft.CodeAnalysis.SyntaxTree,System.Int32,System.Threading.CancellationToken)">
 <summary>
 Finds the token being touched by this position. Unlike the normal FindTrivia helper, this helper will prefer
 trivia to the left rather than the right if the position is on the border.
 </summary>
 <param name="syntaxTree">The syntaxTree to search.</param>
 <param name="position">The position to find trivia.</param>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.RemoveUnnecessaryImports.VisualBasicRemoveUnnecessaryImportsDiagnosticAnalyzer.MergeImports(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode})">
 Takes the import clauses we want to remove and returns them *or* their 
 containing ImportsStatements *if* we wanted to remove all the clauses of
 that ImportStatement.
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.Utilities.SpeculationAnalyzer">
 <summary>
 Helper class to analyze the semantic effects of a speculated syntax node replacement on the parenting nodes.
 Given an expression node from a syntax tree and a new expression from a different syntax tree,
 it replaces the expression with the new expression to create a speculated syntax tree.
 It uses the original tree's semantic model to create a speculative semantic model and verifies that
 the syntax replacement doesn't break the semantics of any parenting nodes of the original expression.
 </summary>
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Utilities.SpeculationAnalyzer.#ctor(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken,System.Boolean,System.Boolean)">
 <summary>
 Creates a semantic analyzer for speculative syntax replacement.
 </summary>
 <param name="expression">Original expression to be replaced.</param>
 <param name="newExpression">New expression to replace the original expression.</param>
 <param name="semanticModel">Semantic model of <paramref name="expression"/> node's syntax tree.</param>
 <param name="cancellationToken">Cancellation token.</param>
 <param name="skipVerificationForReplacedNode">
 True if semantic analysis should be skipped for the replaced node and performed starting from parent of the original and replaced nodes.
 This could be the case when custom verifications are required to be done by the caller or
 semantics of the replaced expression are different from the original expression.
 </param>
 <param name="failOnOverloadResolutionFailuresInOriginalCode">
 True if semantic analysis should fail when any of the invocation expression ancestors of <paramref name="expression"/> in original code has overload resolution failures.
 </param>        
</member>
<member name="M:Microsoft.CodeAnalysis.VisualBasic.Utilities.SpeculationAnalyzer.ReplacementChangesSemanticsOfUnchangedLambda(Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.VisualBasic.Syntax.ExpressionSyntax)">
 <summary>
 Determines whether performing the syntax replacement in one of the sibling nodes of the given lambda expressions will change the lambda binding semantics.
 This is done by first determining the lambda parameters whose type differs in the replaced lambda node.
 For each of these parameters, we find the descendant identifier name nodes in the lambda body and check if semantics of any of the parenting nodes of these
 identifier nodes have changed in the replaced lambda.
 </summary>
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.UseInferredMemberName.VisualBasicUseInferredMemberNameDiagnosticAnalyzer">
 <summary>
 Offers to simplify tuple expressions and anonymous types with redundant names, such as <c>(a:=a, b:=b)</c> or <c>New With {.a = a, .b = b}</c>
 </summary>
</member>
<member name="T:Microsoft.CodeAnalysis.VisualBasic.UseIsNotExpression.VisualBasicUseIsNotExpressionDiagnosticAnalyzer">
 <summary>
 Looks for code of the forms:
 
     If Not x Is ...
 
 and converts it to:
 
     If x IsNot ...
     
 </summary>
</member>
<member name="P:Microsoft.CodeAnalysis.VisualBasic.VBCodeStyleResources.EmptyResource">
 <summary>Remove this value when another is added.</summary>
</member>
<member name="P:VisualBasicCompilerExtensionsResources.EmptyResource">
 <summary>Remove this value when another is added.</summary>
</member>
<member name="P:VisualBasicAnalyzersResources.Imports_statement_is_unnecessary">
 <summary>Imports statement is unnecessary.</summary>
</member>
<member name="P:VisualBasicAnalyzersResources.Use_Is_Nothing_check">
 <summary>Use 'Is Nothing' check</summary>
</member>
<member name="P:VisualBasicAnalyzersResources.Use_IsNot_Nothing_check">
 <summary>Use 'IsNot Nothing' check</summary>
</member>
<member name="P:VisualBasicAnalyzersResources.If_statement_can_be_simplified">
 <summary>'If' statement can be simplified</summary>
</member>
<member name="P:VisualBasicAnalyzersResources.Remove_ByVal">
 <summary>'ByVal' keyword is unnecessary and can be removed.</summary>
</member>
<member name="P:VisualBasicAnalyzersResources.GetType_can_be_converted_to_NameOf">
 <summary>'GetType' can be converted to 'NameOf'</summary>
</member>
<member name="P:VisualBasicAnalyzersResources.Use_IsNot_expression">
 <summary>Use 'IsNot' expression</summary>
</member>
</members>
</doc>
